package com.christianpleister.ibancheck.service;

import com.christianpleister.ibancheck.domain.CheckEvent;
import com.christianpleister.ibancheck.domain.CheckResultEvent;
import org.apache.pdfbox.io.MemoryUsageSetting;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.time.Instant;
import java.util.Arrays;

import static com.christianpleister.ibancheck.domain.CheckResultEvent.StateEnum.*;

@Service
public class IbanCheckService {

    S3Service s3Service;

    @Value("${ibanBlacklist}")
    private String[] blacklist;

    @Autowired
    public IbanCheckService(S3Service s3Service) {
        this.s3Service = s3Service;
    }

    public CheckResultEvent check(CheckEvent checkEvent) throws IOException {
        CheckResultEvent checkResult = new CheckResultEvent().setName("ibanCheck");
        checkResult.setDetails("Check executed at %s".formatted(Instant.now()));

        //download pdf
        File file = s3Service.retrieveFile(checkEvent.getS3Key());
        //check pdf
        PDFTextStripper textStripper = new PDFTextStripper();
        try (PDDocument pdfFile = PDDocument.load(file, MemoryUsageSetting.setupTempFileOnly())) {
            //do page by page to allow large pdfs to be scanned.
            for (int i = 0; i < pdfFile.getNumberOfPages(); i++) {
                textStripper.setStartPage(i);
                textStripper.setEndPage(i);
                String text = textStripper.getText(pdfFile);

                //take all text of page, remove all whitespaces and check against blacklist.
                if (Arrays.stream(blacklist).anyMatch(text.replaceAll("\\s+", "")::contains)) {
                    pdfFile.close();
                    return checkResult
                            .setState(SUSPICIOUS)
                            .setDetails("No download details are provided because provided file did not pass check.");
                }
            }
        } catch (IOException ex) {
            return checkResult.setState(ERROR).setDetails("Technical error occurred. Check logs for more information");
        }
        return checkResult
                .setState(OK)
                .setDetails("Download the file at " + checkEvent.getUrl());
    }
}
