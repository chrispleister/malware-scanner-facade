package com.christianpleister.malwarescannerfacade.service;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.CannedAccessControlList;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import lombok.extern.java.Log;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.UUID;

@Service
@Log
public class S3Service {

    private final String bucketName;

    private final AmazonS3 awsClient;

    @Autowired
    public S3Service(@Value(value = "${awsPropertiesS3.bucketName}") String bucketName, AmazonS3 awsClient) {
        this.bucketName = bucketName;
        this.awsClient = awsClient;
    }

    public String uploadFile(InputStream inputStream) throws IOException {
        String fileName = UUID.randomUUID().toString();
        ObjectMetadata meta = new ObjectMetadata();
        meta.setContentLength(inputStream.available());
        awsClient.putObject(new PutObjectRequest(bucketName, fileName, inputStream, meta)
                .withCannedAcl(CannedAccessControlList.Private));
        //if sdk did not throw exception by now we could assume the file upload worked. should still check for
        //potential sdk exceptions
        return fileName;
    }

    public URL getUrl(String fileKey) {
        return awsClient.getUrl(bucketName, fileKey);
    }

    @PostConstruct
    public void createBucketIfNotExists() {
        //api does not seem to complain if buck is already there. usually this should not be done here but
        // rather all cloud infrastructure of this project should be handled separately with for example terraform.
        awsClient.createBucket(bucketName);
    }
}
