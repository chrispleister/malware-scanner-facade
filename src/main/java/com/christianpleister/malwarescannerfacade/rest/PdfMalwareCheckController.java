package com.christianpleister.malwarescannerfacade.rest;

import com.christianpleister.malwarescannerfacade.domain.CheckEvent;
import com.christianpleister.malwarescannerfacade.service.CheckEventService;
import com.christianpleister.malwarescannerfacade.service.S3Service;
import com.christianpleister.malwarescannerfacade.service.SynchronousChecksService;
import lombok.extern.java.Log;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ResponseStatusException;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

import static org.springframework.http.MediaType.APPLICATION_PDF_VALUE;


@RestController
@Log
public class PdfMalwareCheckController {

    private final CheckEventService checkEventService;
    private final S3Service s3Service;
    private final SynchronousChecksService synchronousChecksService;

    @Autowired
    public PdfMalwareCheckController(
            CheckEventService checkEventService, S3Service s3Service, SynchronousChecksService synchronousChecksService) {
        this.checkEventService = checkEventService;
        this.s3Service = s3Service;
        this.synchronousChecksService = synchronousChecksService;
    }

    @PostMapping(path = "/scan/pdf")
    public ResponseEntity<String> runMalwareScanner(@RequestParam("file") MultipartFile file) throws IOException {
        //TODO should do more validation if file is actually a pdf before further processing.
        //first do synchronous checks
        InputStream fileInputStream = file.getInputStream();
        if (!synchronousChecksService.check(fileInputStream)) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "File could not be accepted.");
        }
        log.info("Synchronous tests passed.");
        //upload file to s3
        String fileKey = s3Service.uploadFile(fileInputStream);
        URL fileUrl = s3Service.getUrl(fileKey);
        log.info("File uploaded to S3.");
        //publish job to kafka
        CheckEvent checkEvent = new CheckEvent()
                .setS3Key(fileKey)
                .setUrl(fileUrl.toString())
                .setFileType(APPLICATION_PDF_VALUE);

        checkEventService.publish(checkEvent);
        log.info("CheckEvent published.");
        return ResponseEntity.ok().build();
    }
}
